#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    May 12, 2022 02:55:23 AM +07  platform: Windows NT

import backend
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import messagebox

import history_support

from PIL import Image, ImageTk
import SearchFlight
import main
import payment_support
        
class History_page:
    def __init__(self, top=None):
            
        user_id = backend.Account.getLoginUser()
            
            
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        screen_width = top.winfo_screenwidth()
        screen_height = top.winfo_screenheight()
        x_cordinate = int((screen_width/2) - (800/2))
        y_cordinate = int((screen_height/2) - (600/2))

        top.geometry(f"800x600+{x_cordinate}+{y_cordinate}")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("History")
        top.configure(background="#d9d9d9")

        self.top = top

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=-0.004, rely=0.0, height=600, width=803)
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(foreground="#000000")
        photo_location = Image.open("history.jpg")
        global _img0
        _img0 = ImageTk.PhotoImage(photo_location)
        self.Label1.configure(image=_img0)
        self.Label1.configure(text='''Label''')

        self.Button_back = tk.Button(self.top)
        self.Button_back.place(relx=0.063, rely=0.067, height=44, width=47)
        self.Button_back.configure(activebackground="#000000")
        self.Button_back.configure(activeforeground="white")
        self.Button_back.configure(activeforeground="#ffffff")
        self.Button_back.configure(background="#ffffff")
        self.Button_back.configure(compound='left')
        self.Button_back.configure(foreground="#000000")
        self.Button_back.configure(pady="0")
        self.Button_back.configure(text='''Back''')
        self.Button_back.configure(command=self.back)
        

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.163, rely=0.233, height=41, width=148)
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#fcf6ed")
        self.Label2.configure(compound='left')
        self.Label2.configure(font="-family {Arial} -size 13 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Information''')

        self.Label2_1 = tk.Label(self.top)
        self.Label2_1.place(relx=0.425, rely=0.233, height=41, width=148)
        self.Label2_1.configure(anchor='w')
        self.Label2_1.configure(background="#fcf6ed")
        self.Label2_1.configure(compound='left')
        self.Label2_1.configure(font="-family {Arial} -size 13 -weight bold")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(text='''Price''')

        self.Label2_1_1 = tk.Label(self.top)
        self.Label2_1_1.place(relx=0.663, rely=0.233, height=41, width=148)
        self.Label2_1_1.configure(background="#fcf6ed")
        self.Label2_1_1.configure(compound='left')
        self.Label2_1_1.configure(font="-family {Arial} -size 13 -weight bold")
        self.Label2_1_1.configure(foreground="#000000")
        self.Label2_1_1.configure(text='''Status''')
        
        y_loc = 0.33
        
        labels_departure = []
        labels_price = []
        buttons_price = []
        
        for flight in backend.Book_Flight.getBookHistoryByUserId(user_id):
            book_id = str(list(flight)[0])
            flight_data = backend.Flight.getFlightById(flight[book_id]["Flight_ID"])

            Label_departure = tk.Label(self.top)
            Label_departure.configure(anchor='w')
            Label_departure.configure(background="#fcf6ed")
            Label_departure.configure(compound='left')
            Label_departure.configure(font="-family {Arial} -size 13")
            Label_departure.configure(foreground="#000000")
            Label_departure.configure(text=f'''{flight[book_id]["Source"]} > {flight_data["name"]}''')
            Label_departure.place(relx=0.096, rely=y_loc+0.01, height=21, width=150)

            Label_price = tk.Label(self.top)
            Label_price.place(relx=0.363, rely=y_loc, height=41, width=148)
            Label_price.configure(background="#fcf6ed")
            Label_price.configure(compound='left')
            Label_price.configure(font="-family {Arial} -size 13")
            Label_price.configure(foreground="#000000")
            Label_price.configure(text=f'''{flight_data["price"]}''')
                
            status_color = ""
            command = None
            
            booking = backend.Book_Flight(book_id)
            
            if(flight[book_id]["Status"] == "Complete"):
                    status_color = "#b3ff66"
                    command= lambda arg=booking : self.clickComplete(arg)
                    
                    
            elif(flight[book_id]["Status"] == "Pending"):
                    status_color = "#FFA500"
                    command= lambda arg=booking : self.clickPending(arg)
                    
            elif(flight[book_id]["Status"] == "Cancel"):
                    status_color = "#D0312D"
                    command= lambda arg=booking : self.clickCancel(arg)
            
            y_loc += 0.10

            Button_success = tk.Button(self.top)
            Button_success.place(relx=0.675, rely=y_loc-0.1, height=34, width=117)
            Button_success.configure(background=status_color)
            Button_success.configure(compound='left')
            Button_success.configure(font="-family {Arial} -size 12")
            Button_success.configure(foreground="#ffffff")
            Button_success.configure(text=f'''{flight[book_id]["Status"]}''')
            Button_success.configure(command=command)

    def back(self):
        main.changePage(self.top, SearchFlight.search_page)
        pass

    def clickPending(self,booking):
        self.top.destroy()
        
        payment_support.main(booking.Book_id)
        
        pass

    def clickComplete(self,booking):
        print(booking)
        MsgBox = messagebox.askquestion ('WARNING','Do you want to cancel this booking?',icon = 'warning')
        if MsgBox == 'yes':
                booking.cancel()
                main.changePage(self.top, History_page)
        pass

    def clickCancel(self,booking):
        print(booking)
        pass
    
    def back(self):
        main.changePage(self.top,SearchFlight.search_page)

def start_up():
    history_support.main()

if __name__ == '__main__':
    history_support.main()




