#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    May 12, 2022 03:03:42 AM +07  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import messagebox
from datetime import datetime
import backend
from tkcalendar import DateEntry
import payment2_support
from PIL import Image, ImageTk

class payment_page:
    def __init__(self, top=None,bookid='11'):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("800x600+541+185")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("payment")
        top.configure(background="#400040")
        waitbooktid = None
        if(bookid):
                waitbooktid = bookid
                self.Book_id = waitbooktid
        else:
                waitbooktid = backend.Book_Flight.countAllBookData()
                self.Book_id = waitbooktid

        self.top = top

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.0, rely=0.0, height=600, width=804)
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(foreground="#000000")
        photo_location = Image.open("payment.jpg")
        global _img0
        _img0 = ImageTk.PhotoImage(photo_location)
        self.Label1.configure(image=_img0)

        self.Label_user = tk.Label(self.top)
        self.Label_user.place(relx=0.481, rely=0.425, height=41, width=248)
        self.Label_user.configure(anchor='w')
        self.Label_user.configure(background="#00a8c1")
        self.Label_user.configure(compound='left')
        self.Label_user.configure(font="-family {TH Niramit AS} -size 24 -weight bold")
        self.Label_user.configure(foreground="#ffffff")
        waiteruserid = backend.Book_Flight.getBookDetailById(waitbooktid)['User_ID']
        self.Label_user.configure(text=backend.User.getUserById(waiteruserid)['username'])

        self.Label_ID = tk.Label(self.top)
        self.Label_ID.place(relx=0.481, rely=0.503, height=41, width=248)
        self.Label_ID.configure(anchor='w')
        self.Label_ID.configure(background="#00a8c1")
        self.Label_ID.configure(compound='left')
        self.Label_ID.configure(font="-family {TH Niramit AS} -size 24 -weight bold")
        self.Label_ID.configure(foreground="#ffffff")
        waiteruserid = backend.Book_Flight.getBookDetailById(waitbooktid)['User_ID']
        self.Label_ID.configure(text=backend.User.getUserById(waiteruserid)['id_card'])

        self.Label_departure = tk.Label(self.top)
        self.Label_departure.place(relx=0.481, rely=0.593, height=41, width=248)
        self.Label_departure.configure(anchor='w')
        self.Label_departure.configure(background="#00a8c1")
        self.Label_departure.configure(compound='left')
        self.Label_departure.configure(font="-family {TH Niramit AS} -size 24 -weight bold")
        self.Label_departure.configure(foreground="#ffffff")
        self.Label_departure.configure(text=backend.Book_Flight.getBookDetailById(waitbooktid)['Source'] + " > " + backend.Book_Flight.getBookDetailById(waitbooktid)['Destination'])

        self.Label_price = tk.Label(self.top)
        self.Label_price.place(relx=0.481, rely=0.72, height=41, width=248)
        self.Label_price.configure(anchor='w')
        self.Label_price.configure(background="#00a8c1")
        self.Label_price.configure(compound='left')
        self.Label_price.configure(font="-family {TH Niramit AS} -size 24 -weight bold")
        self.Label_price.configure(foreground="#ffffff")
        Flight_ID = backend.Book_Flight.getBookDetailById(waitbooktid)['Flight_ID']
        self.Label_price.configure(text=backend.Flight.getFlightById(Flight_ID)['price'])

        self.Button_back = tk.Button(self.top)
        self.Button_back.place(relx=0.063, rely=0.033, height=34, width=47)
        self.Button_back.configure(activebackground="#008080")
        self.Button_back.configure(activeforeground="white")
        self.Button_back.configure(activeforeground="#000000")
        self.Button_back.configure(background="#ffffff")
        self.Button_back.configure(compound='left')
        self.Button_back.configure(foreground="#000000")
        self.Button_back.configure(pady="0")
        self.Button_back.configure(text='''Back''')

        self.Button_comfirm = tk.Button(self.top)
        self.Button_comfirm.place(relx=0.525, rely=0.883, height=34, width=147)
        self.Button_comfirm.configure(activebackground="#ffffff")
        self.Button_comfirm.configure(activeforeground="#7ed957")
        self.Button_comfirm.configure(background="#7ed957")
        self.Button_comfirm.configure(compound='left')
        self.Button_comfirm.configure(font="-family {Arial} -size 15")
        self.Button_comfirm.configure(foreground="#000000")
        self.Button_comfirm.configure(pady="0")
        self.Button_comfirm.configure(text='''CONFIRM''')

        self.Button_cancel = tk.Button(self.top)
        self.Button_cancel.place(relx=0.263, rely=0.883, height=34, width=147)
        self.Button_cancel.configure(activebackground="#ffffff")
        self.Button_cancel.configure(activeforeground="#98c2e3")
        self.Button_cancel.configure(background="#98c2e3")
        self.Button_cancel.configure(compound='left')
        self.Button_cancel.configure(font="-family {Arial} -size 15")
        self.Button_cancel.configure(foreground="#000000")
        self.Button_cancel.configure(pady="0")
        self.Button_cancel.configure(text='''CANCEL''')

def start_up():
    payment2_support.main()

if __name__ == '__main__':
    payment2_support.main()




